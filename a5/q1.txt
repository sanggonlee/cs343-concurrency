Timing with PAD not defined: 44.32u 0.13s 0:22.31
Timing with PAD defined: 7.09u 0.05s 0:03.56

- Reason for difference between time with respect to memory location: Normally a cache
  line contains multiple variables, so when it is not aligned with 64 bytes and when
  the same memory location is read/written continually, cache thrashing occurs (in
  this case, false sharing). If the memory locations are aligned with 64 bytes however,
  it is ensured that each call to cache brings only one variable at a time, not having
  to excessively read/write to cache every time.

- Order of addresses of the global variables: The global variables are stored in
  heap, and stack and heap grow towards each other. Whether a stack/heap grows
  upward or downward depends on what platform the program is run, but in this
  case the heap grows downward and stack grows upward and that is why the adresses
  of the global variables are in decreasing order.
  
- Why cast (void *) for counters: Most pointer variables are cast to (void *)
  but it is not defined for volatile pointers, so C++ implicitly casts to bool,
  so 1 is printed if it is not cast to (void *).
